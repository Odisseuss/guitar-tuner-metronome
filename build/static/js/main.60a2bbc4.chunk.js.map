{"version":3,"sources":["common/components/Loading.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["StyledContainer","styled","div","StyledText","h1","Loading","TunerContainer","lazy","MetronomeContainer","CenteredAppContainer","props","color_1","color_2","Container","App","useState","primary","gradient_darker","gradient_lighter","currentColors","setCurrentColors","fallback","exact","path","setColors","primaryColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","addEventListener","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.60a2bbc4.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport interface LoadingProps {}\r\n\r\nlet StyledContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nlet StyledText = styled.h1`\r\n  font-size: 2.5rem;\r\n`;\r\nconst Loading: React.FunctionComponent<LoadingProps> = () => {\r\n  return (\r\n    <StyledContainer>\r\n      <StyledText>Loading...</StyledText>\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState, Suspense, lazy } from 'react';\r\nimport { IAppProps, IContainerGradientProps } from './types/Interfaces';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Header from './common/components/Header';\r\nimport styled from 'styled-components';\r\nimport Loading from './common/components/Loading';\r\nconst TunerContainer = lazy(() => import('./pages/tuner/TunerContainer'));\r\nconst MetronomeContainer = lazy(\r\n\t() => import('./pages/metronome/MetronomeContainer')\r\n);\r\n\r\nlet CenteredAppContainer = styled.div<IContainerGradientProps>`\r\n\tmax-width: 650px;\r\n\tmax-height: 850px;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tposition: relative;\r\n\tbackground: radial-gradient(\r\n\t\t72.19% 72.19% at 49.92% 27.81%,\r\n\t\t${props => props.color_1} 0%,\r\n\t\t${props => props.color_1} 0.01%,\r\n\t\t${props => props.color_2} 100%\r\n\t);\r\n`;\r\nlet Container = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\theight: 100vh;\r\n\twidth: 100vw;\r\n\tbackground-color: #111;\r\n`;\r\n\r\nconst App: React.FunctionComponent<IAppProps> = () => {\r\n\tlet [currentColors, setCurrentColors] = useState({\r\n\t\tprimary: '#F72640',\r\n\t\tgradient_darker: '#0F0910',\r\n\t\tgradient_lighter: '#1F0E18',\r\n\t});\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<CenteredAppContainer\r\n\t\t\t\tcolor_1={currentColors.gradient_lighter}\r\n\t\t\t\tcolor_2={currentColors.gradient_darker}\r\n\t\t\t>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<Suspense fallback={<Loading />}>\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route exact path='/'>\r\n\t\t\t\t\t\t\t\t<TunerContainer\r\n\t\t\t\t\t\t\t\t\tsetColors={setCurrentColors}\r\n\t\t\t\t\t\t\t\t\tcurrentColors={currentColors}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t<Route path='/metronome'>\r\n\t\t\t\t\t\t\t\t<MetronomeContainer\r\n\t\t\t\t\t\t\t\t\tsetColors={setCurrentColors}\r\n\t\t\t\t\t\t\t\t\tcurrentColors={currentColors}\r\n\t\t\t\t\t\t\t\t\tprimaryColor={currentColors.primary}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t</Router>\r\n\t\t\t</CenteredAppContainer>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Don't run if on different origin\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // Running on localhost\n        // Check if there is a service worker installed\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"Service worker is ready\");\n        });\n      } else {\n        // Not local host, register valid sw\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all tabs are closed\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Reload page\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nif (\"serviceWorker\" in navigator && process.env.NODE_ENV === \"production\") {\r\n  window.addEventListener(\"load\", function () {\r\n    navigator.serviceWorker.register(\"%PUBLIC_URL%/service-worker.js\");\r\n  });\r\n}\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}